--
-- Target: Microsoft SQL Server 
-- Syntax: isql /Uuser /Ppassword /Sserver -i\path\filename.sql
-- Date  : Oct 10 2018 14:15
-- Script Generated by Database Design Studio 2.21.3 
--



--
-- Create Table    : 'City'   
-- cityName        :  
-- zipCode         :  
-- cityId          :  
-- countryRegion   :  
--
CREATE TABLE City (
    cityName       NVARCHAR(100) NOT NULL,
    zipCode        NVARCHAR(100) NOT NULL UNIQUE,
    cityId         BIGINT IDENTITY (1, 1) NOT NULL UNIQUE,
    countryRegion  NVARCHAR(100) NOT NULL,
CONSTRAINT pk_City PRIMARY KEY CLUSTERED (cityId))
GO

--
-- Create Table    : 'Address'   
-- streetAddress   :  
-- addressId       :  
-- cityId          :  (references City.cityId)
--
CREATE TABLE Address (
    streetAddress  NVARCHAR(100) NOT NULL,
    addressId      BIGINT IDENTITY (1, 1) NOT NULL UNIQUE,
    cityId         BIGINT NOT NULL,
CONSTRAINT pk_Address PRIMARY KEY CLUSTERED (addressId),
CONSTRAINT fk_Address FOREIGN KEY (cityId)
    REFERENCES City (cityId)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
GO

--
-- Create Table    : 'Person'   
-- fullName        :  
-- personId        :  
-- personType      :  
-- addressId       :  (references Address.addressId)
--
CREATE TABLE Person (
    fullName       VARCHAR(100) NOT NULL,
    personId       BIGINT IDENTITY (1, 1) NOT NULL UNIQUE,
    personType     VARCHAR(100) NOT NULL,
    addressId      BIGINT NULL,
CONSTRAINT pk_Person PRIMARY KEY CLUSTERED (personId),
CONSTRAINT fk_Person FOREIGN KEY (addressId)
    REFERENCES Address (addressId)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
GO

--
-- Create Table    : 'ContactInfo'   
-- phoneCompany    :  
-- phoneNumber     :  
-- contactId       :  
-- personId        :  (references Person.personId)
-- phoneType       :  
--
CREATE TABLE ContactInfo (
    phoneCompany   NVARCHAR(100) NOT NULL,
    phoneNumber    BIGINT NOT NULL UNIQUE,
    contactId      BIGINT IDENTITY (1, 1) NOT NULL UNIQUE,
    personId       BIGINT NOT NULL,
    phoneType      NVARCHAR(100) NOT NULL,
CONSTRAINT pk_ContactInfo PRIMARY KEY CLUSTERED (contactId),
CONSTRAINT fk_ContactInfo FOREIGN KEY (personId)
    REFERENCES Person (personId)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
GO

--
-- Create Table    : 'EmailAddress'   
-- email           :  
-- emailId         :  
-- personId        :  (references Person.personId)
--
CREATE TABLE EmailAddress (
    email          NVARCHAR(100) NOT NULL UNIQUE,
    emailId        BIGINT IDENTITY (1, 1) NOT NULL UNIQUE,
    personId       BIGINT NULL,
CONSTRAINT pk_EmailAddress PRIMARY KEY CLUSTERED (emailId),
CONSTRAINT fk_EmailAddress FOREIGN KEY (personId)
    REFERENCES Person (personId)
    ON UPDATE CASCADE)
GO

--
-- Create Table    : 'Note'   
-- noteId          :  
-- note            :  
-- personId        :  (references Person.personId)
--
CREATE TABLE Note (
    noteId         BIGINT IDENTITY (1, 1) NOT NULL UNIQUE,
    note           NVARCHAR(100) NOT NULL,
    personId       BIGINT NULL,
CONSTRAINT pk_Note PRIMARY KEY CLUSTERED (noteId),
CONSTRAINT fk_Note FOREIGN KEY (personId)
    REFERENCES Person (personId)
    ON UPDATE CASCADE)
GO

--
-- Create Table    : 'AA'   
-- personId        :  (references Person.personId)
-- addressId       :  (references Address.addressId)
-- altAddressId    :  
-- addressType     :  
--
CREATE TABLE AA (
    personId       BIGINT NOT NULL,
    addressId      BIGINT NOT NULL,
    altAddressId   BIGINT NOT NULL UNIQUE,
    addressType    NVARCHAR(100) NOT NULL,
CONSTRAINT pk_AA PRIMARY KEY CLUSTERED (personId,addressId,altAddressId),
CONSTRAINT fk_AA FOREIGN KEY (personId)
    REFERENCES Person (personId)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
--CONSTRAINT fk_AA2 FOREIGN KEY (addressId)
--    REFERENCES Address (addressId)
--    ON DELETE CASCADE
--    ON UPDATE CASCADE
	)
GO

--
-- Permissions for: 'public'
--
GRANT ALL ON City TO public
GO
GRANT ALL ON Address TO public
GO
GRANT ALL ON Person TO public
GO
GRANT ALL ON ContactInfo TO public
GO
GRANT ALL ON EmailAddress TO public
GO
GRANT ALL ON Note TO public
GO
GRANT ALL ON AA TO public
GO

